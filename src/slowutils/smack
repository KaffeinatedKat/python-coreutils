#!/usr/bin/python3

# smack - change modification and access times of files

import os
import sys
import time
import datetime


class Path:
    def __init__(self):
        self.stamp_formats = ["%y%m%d%H%M", "%Y%m%d%H%M", "%Y%m%d%H%M.%S", "%y%m%d%H%M.%S"]
        self.stats = None
        self.mtime = 0
        self.atime = 0
        self.path = ""

    def update_file_times(self, Vars, Error):
        self.atime = Vars.new_time
        self.mtime = Vars.new_time

        if Vars.ref_file != "":
            if not os.path.exists(Vars.ref_file):
                Error.attrib(Vars.ref_file)
            else:
                self.atime = os.stat(Vars.ref_file).st_atime
                self.mtime = os.stat(Vars.ref_file).st_mtime

        if not Vars.modify_only and Vars.access_only: #  skip if -am so both times are modified
            if Vars.modify_only:
                self.atime = os.stat(self.path).st_atime
            elif Vars.access_only:
                self.mtime = os.stat(self.path).st_mtime

        if os.path.exists(self.path):
            os.utime(self.path, (self.atime, self.mtime), follow_symlinks=Vars.symlinks)



    def get_time_stamp(self, Vars, Error, time):
        for x in self.stamp_formats:
            valid_time = False
            try:
                Vars.new_time = datetime.datetime.strptime(time, x)
                valid_time = Vars.new_time.strftime(x) == time # converts date object back to string and compares it to the input date (requires date have padded zeros, hours and minutes)
                if valid_time: 
                    break
            except ValueError:
                Vars.new_time = None

        if Vars.new_time is None or not valid_time:
            Error.invalid_date_format(time)





class Variables:
    def __init__(self):
        self.program = sys.argv[0]
        self.new_time = datetime.datetime.now()
        self.valid_args = ["-a", "-m", "-h", "-t", "-c", "-r"]
        self.create_new = True
        self.modify_only = False
        self.access_only = False
        self.symlinks = True
        self.ref_file = ""
        self.file_list = []
        self.args = []

    def get_args(self, Vars, File, Error):
        index_ignore = []
        for x in sys.argv[1:]:
            if x.startswith("--"):
                self.args.append(x)
            elif x.startswith("-") and not x.endswith("-"):
                for z in list(x):
                    if z != "-":
                        self.args += [f"-{z}"]
            else:
                self.args.append(x)

        for index, x in enumerate(self.args):
            if x.startswith("-") and not x.endswith("-"):
                if x not in self.valid_args:
                    if not x.startswith("--"):
                        x = x.replace("-", "")
                    Error.invalid_argument(x)
                    exit(1)
                if "-t" in x:
                    try:
                        File.get_time_stamp(self, Error, self.args[index + 1])
                        index_ignore += [index + 1]
                    except IndexError:
                        Error.no_argument(x.replace("-", ""))

                if "-r" in x:
                    try:
                        Vars.ref_file = os.path.join(self.args[index + 1])
                        index_ignore += [index + 1]
                    except IndexError:
                        Error.no_argument(x.replace("-", ""))

                if "-m" in x:
                    Vars.modify_only = True

                if "-a" in x:
                    Vars.access_only = True

                if "-c" in x:
                    Vars.create_new = False

                if "-h" in x:
                    Vars.symlinks = False
            else:
                if index not in index_ignore: # dont parse option arguments as files
                    self.file_list.append(x)





class Exceptions(Variables):
    def invalid_date_format(self, date):
        print(f"{self.program}: invalid date format '{date}'")
        exit(1)
    
    def no_argument(self, option):
        print(f"{self.program}: option requires an argument -- '{option}'\nTry '{self.program} --help' for more information.")
        exit(1)

    def attrib(self, file):
        print(f"{self.program}: failed to get attributes of '{file}': No such file or directory")
        exit(1)

    def missing_operand(self):
        print(f"{self.program}: missing file operand\nTry '{self.program} -- help' for more information.")
        exit(1)

    def invalid_argument(self, argument):
        print(f"{self.program}: invalid option -- '{argument}'\nTry '{self.program} --help' for more information.")
        exit(1)





def main():
    Vars = Variables()
    File = Path()
    Error = Exceptions()
    
    Vars.get_args(Vars, File, Error)

    if Vars.file_list == []:
        Error.missing_operand()

    Vars.new_time = time.mktime(Vars.new_time.timetuple())

    for x in Vars.file_list:
        File.path = os.path.join(x)
        File.new_time = datetime.datetime.now()
        
        if not os.path.exists(File.path) and Vars.create_new:
            open(File.path, "x").close()
        
        File.update_file_times(Vars, Error)

        
if __name__ == "__main__":
    main()
